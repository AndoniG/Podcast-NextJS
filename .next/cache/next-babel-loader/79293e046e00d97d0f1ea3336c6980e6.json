{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\Proyectos Personales\\\\NextJS\\\\podcasts\\\\pages\\\\[channel].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Layout } from \"../components/Layout\";\nimport { PodcastGrid } from \"../components/PodcastGrid\";\nimport { SeriesGrid } from \"../components/SeriesGrid\";\nimport Error from \"./_error\";\nexport var __N_SSP = true;\nexport default _s(function (_ref) {\n  _s();\n\n  var channel = _ref.channel,\n      audioClips = _ref.audioClips,\n      series = _ref.series,\n      statusCode = _ref.statusCode;\n\n  var _useState = useState(null),\n      selectedPodcast = _useState[0],\n      setSelectedPodcast = _useState[1];\n\n  var handleSetSelectedPost = function handleSetSelectedPost(event, podcast) {\n    event.preventDefault();\n    setSelectedPodcast(podcast);\n  };\n\n  if (statusCode) {\n    return __jsx(Error, {\n      statusCode: statusCode,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (selectedPodcast) {\n    return \"Podcast abierto\";\n  }\n\n  return __jsx(Layout, {\n    title: \"\".concat(channel.title),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, series.length > 0 && __jsx(SeriesGrid, {\n    series: series,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  }), audioClips.length > 0 && __jsx(PodcastGrid, {\n    audioClips: audioClips,\n    setSelectedPodcast: handleSetSelectedPost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }));\n}, \"3MAeVh9U5lgyRc+l8sLpX+fa/sk=\");","map":{"version":3,"sources":["D:/Proyectos Personales/NextJS/podcasts/pages/[channel].js"],"names":["React","useState","Layout","PodcastGrid","SeriesGrid","Error","channel","audioClips","series","statusCode","selectedPodcast","setSelectedPodcast","handleSetSelectedPost","event","podcast","preventDefault","title","length"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AA0CA,kBAAe,gBAAiD;AAAA;;AAAA,MAA9CC,OAA8C,QAA9CA,OAA8C;AAAA,MAArCC,UAAqC,QAArCA,UAAqC;AAAA,MAAzBC,MAAyB,QAAzBA,MAAyB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,kBAChBR,QAAQ,CAAC,IAAD,CADQ;AAAA,MACvDS,eADuD;AAAA,MACtCC,kBADsC;;AAG9D,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAQC,OAAR,EAAoB;AAChDD,IAAAA,KAAK,CAACE,cAAN;AACAJ,IAAAA,kBAAkB,CAACG,OAAD,CAAlB;AACD,GAHD;;AAKA,MAAIL,UAAJ,EAAgB;AACd,WAAO,MAAC,KAAD;AAAO,MAAA,UAAU,EAAEA,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAIC,eAAJ,EAAqB;AACnB,WAAO,iBAAP;AACD;;AAED,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,YAAKJ,OAAO,CAACU,KAAb,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,MAAM,CAACS,MAAP,GAAgB,CAAhB,IAAqB,MAAC,UAAD;AAAY,IAAA,MAAM,EAAET,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxB,EAEGD,UAAU,CAACU,MAAX,GAAoB,CAApB,IACC,MAAC,WAAD;AACE,IAAA,UAAU,EAAEV,UADd;AAEE,IAAA,kBAAkB,EAAEK,qBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADF;AAWD,CA3BD","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Layout } from \"../components/Layout\";\r\nimport { PodcastGrid } from \"../components/PodcastGrid\";\r\nimport { SeriesGrid } from \"../components/SeriesGrid\";\r\nimport Error from \"./_error\";\r\n\r\nexport async function getServerSideProps({ query, res }) {\r\n  try {\r\n    let channelId = query.id;\r\n    let [reqChannel, reqSeries, reqAudios] = await Promise.all([\r\n      fetch(`https://api.audioboom.com/channels/${channelId}`),\r\n      fetch(`https://api.audioboom.com/channels/${channelId}/child_channels`),\r\n      fetch(`https://api.audioboom.com/channels/${channelId}/audio_clips`),\r\n    ]);\r\n\r\n    const channelErrorCode = reqChannel.ok ? false : reqChannel.status;\r\n    const seriesErrorCode = reqSeries.ok ? false : reqSeries.status;\r\n    const audiosErrorCode = reqAudios.ok ? false : reqAudios.status;\r\n\r\n    const statusCode =\r\n      channelErrorCode !== false\r\n        ? channelErrorCode\r\n        : seriesErrorCode !== false\r\n        ? seriesErrorCode\r\n        : audiosErrorCode;\r\n\r\n    if (statusCode) {\r\n      return {\r\n        props: { channel: null, audioClips: null, series: null, statusCode },\r\n      };\r\n    }\r\n\r\n    let channel = (await reqChannel.json()).body.channel;\r\n    let audioClips = (await reqAudios.json()).body.audio_clips;\r\n    let series = (await reqSeries.json()).body.channels;\r\n\r\n    return { props: { channel, audioClips, series, statusCode } };\r\n  } catch (e) {\r\n    res.statusCode = e.status || 503;\r\n    console.log(\"catch\");\r\n    return {\r\n      props: { channel: null, audioClips: null, series: null, statusCode: 503 },\r\n    };\r\n  }\r\n}\r\n\r\nexport default ({ channel, audioClips, series, statusCode }) => {\r\n  const [selectedPodcast, setSelectedPodcast] = useState(null);\r\n\r\n  const handleSetSelectedPost = (event, podcast) => {\r\n    event.preventDefault();\r\n    setSelectedPodcast(podcast);\r\n  };\r\n\r\n  if (statusCode) {\r\n    return <Error statusCode={statusCode} />;\r\n  }\r\n\r\n  if (selectedPodcast) {\r\n    return \"Podcast abierto\";\r\n  }\r\n\r\n  return (\r\n    <Layout title={`${channel.title}`}>\r\n      {series.length > 0 && <SeriesGrid series={series} />}\r\n      {audioClips.length > 0 && (\r\n        <PodcastGrid\r\n          audioClips={audioClips}\r\n          setSelectedPodcast={handleSetSelectedPost}\r\n        />\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}